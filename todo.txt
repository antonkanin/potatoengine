- start using quaternions for rotations

- add 'material' class

- add light parameters to the editor
  * point light
  * direction light (default)
  * spot light

- add color property to the game_object

- show the list of game_objects
  * click on the game_object in the list highlights it in the scene
  * adding new object adds it to the list
  * deleting from the list also deletes from the scene
  * rearranging objects in the list

  implementation:
    vector<unique_ptr<game_object>> objects; // main 'owning' storage for all base game_objects

    vector<game_objects*> ordered_objects;  // this is used to get game_object* knowing it's ID in the names list
    vector<const char*>     ordered_names;  // this is used by IMGUI to show the list


- add memory clean up to video, physics, audio

- add different geometry types: cube, sphere, line

- add child 'game objects' support

- [bug] LEFT SHIFT does continue movement when you hold it

- add the support for two view ports (player view (First Person) and free camera)

- [low ]add type_traits check: game_object children must inherit a constructor

- [low] implement my own projection & lookat matrices

- [low] do not read mouse input when the game window is not in active

- [low] load texture in the TGA format

Done
- make sure hair rendering respect the original texture of the model
- deleting objects at runtime
- add color to the draw_line function (perhaps we need a new shader?)
- draw a cross in the middle of the screen
- add a switch between game mode / editor more (F12 key)
- add a switch to lock cursor
- add scene save and load
- resize viewport when windows screen is updated
- sync scaling between game_object and physics
- remove 0.5 sec delay when pressing keys on the keyboard
- separate IMGUI integration into input handling and rendering
- refactor engine_sdl using strategy pattern (abstract classes: rendering_strategy,
  input_strategy, audio_strategy, etc)
- separate logic into 4 separate components:
    * input
    * rendering
    * audio
    * physics
- separate light and other objects rendering
- add basic lighting
- read apply diffuse color to the vertex when it's present in the model
- add support for multiple game objects with models, currently we only support one mesh
- enhance shader class: add a method to setup uniforms
- add movable_object class and make it available to the game_object
- add delta time to the engine and let objects use it
- read UV coordinates